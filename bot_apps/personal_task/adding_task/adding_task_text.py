import re

from databases.database import db
from bot_apps.wordbank.wordlist import add_task
from config import load_config

config = load_config()


# –§—É–Ω–∫—Ü–∏—è, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è —Ç–µ–∫—Å—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def task_setting_text_builder(setting_actions, accepted):
    main_text = add_task['main_text']

    # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å—Å—ã–ª–∫–∞
    if 'subscriptions' in setting_actions:
        main_text += '<b>‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:</b> '
        # –ï—Å–ª–∏ –¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        if accepted['profile_link']:
            main_text += f'{accepted["profile_link"][8:]}\n'
        # –ï—Å–ª–∏ –¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç (–≤ –Ω–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)
        elif accepted['post_link']:
            main_text += re.search(r"(twitter\.com/\S+?)/status/\d+", accepted["post_link"]).group(1) + '\n'
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
        else:
            main_text += '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n'

    # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–æ—Å—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç
    if 'likes' in setting_actions or 'retweets' in setting_actions or 'comments' in setting_actions:
        action_list = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–µ–¥–∞—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
        if 'likes' in setting_actions:
            action_list.append('–ª–∞–π–∫')
        if 'retweets' in setting_actions:
            action_list.append('—Ä–µ—Ç–≤–∏—Ç')
        if 'comments' in setting_actions:
            action_list.append('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')

        main_text += f"‚Äî <b>{', '.join(action_list).capitalize()}</b>" + (f': \n{accepted["post_link"][8:]}\n' if accepted["post_link"] else ': –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n')

    # –ï—Å–ª–∏ –±—ã–ª –∑–∞–¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if 'comments' in setting_actions:
        main_text += '<b>‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b> '
        comment_list = []  # –ï—â—ë –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ —Ç–æ, –¥–æ–±–∞–≤–∏–ª–æ—Å—å –ª–∏ –≤ –Ω–µ–≥–æ —á—Ç–æ-—Ç–æ
        # –ï—Å–ª–∏ –±—ã–ª–∞ –∑–∞–¥–∞–Ω–∞ –æ–¥–Ω–∞ –∏–∑ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if 'one_value' in accepted['comment_parameters'] and accepted['comment_parameters']['one_value']:
            # –î–æ–ø —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ 3 –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            dop_dict = {'words': '<b>–ü–∞—Ä–∞–º–µ—Ç—Ä:</b> –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤ (<code>{0}</code>)', 'tags': '<b>–ü–∞—Ä–∞–º–µ—Ç—Ä:</b> –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—ç–≥–æ–≤ (<code>{0}</code>)', 'tags/words': '<b>–ü–∞—Ä–∞–º–µ—Ç—Ä:</b> –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Ç—ç–≥–∞–º (<code>{0}</code>)'}
            # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∏ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            for key in accepted['comment_parameters']['one_value']:
                if accepted['comment_parameters']['one_value'][key]:
                    if key == 'tags/words':
                        words = accepted['comment_parameters']['one_value']['tags/words']['words']
                        tags = accepted['comment_parameters']['one_value']['tags/words']['tags']
                        combined_list = f"<code>{', '.join(words + (tags if tags else []))}</code>"
                        comment_list.append(dop_dict[key].format(combined_list))
                    else:
                        comment_list.append(dop_dict[key].format(accepted['comment_parameters']['one_value'][key]))
                    break
        # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        if 'note' in accepted['comment_parameters'] and accepted['comment_parameters']['note']:
            comment_list.append(f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b> {accepted['comment_parameters']['note']}")
        # –ï—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ
        if 'only_english' in accepted['comment_parameters'] and accepted['comment_parameters']['only_english']:
            comment_list.append('<b>–Ø–∑—ã–∫:</b> —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π')

        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∏ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
        if not comment_list:
            main_text += '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'
        # –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
        else:
            main_text += '\n' + '\n'.join(comment_list)
    return main_text


# –§—É–Ω–∫—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ç–µ–∫—Å—Ç –æ –≤—Å—ë–º —Ç–æ, —á—Ç–æ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–ª
async def text_under_comment_parameters_builder(info):
    # info =  data['accepted']['comment_parameters']
    main_text = add_task['user_setting_comment']

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if not info or \
            info == {'one_value': {}} or \
            info == {'only_english': False, 'one_value': {}} or \
            info == {'only_english': False}:
        return main_text + '\n\n–ò —Ç–∞–∫, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫—Éüëá'
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    else:
        main_text += '\n\n<b>–ó–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>'

    # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –æ–¥–Ω–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
    if 'one_value' in info and 'words' in info['one_value']:
        main_text += '\n<b>‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä:</b> '
        # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        if info['one_value']['words']:
            main_text += f"–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤ (<code>{info['one_value']['words']}</code>)"
        # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ç–≥–æ–≤
        elif info['one_value']['tags']:
            main_text += f"–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—ç–≥–æ–≤ (<code>{info['one_value']['tags']}</code>)"
        # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/—Ç—ç–≥–∏
        else:
            words = info['one_value']['tags/words']['words']
            tags = info['one_value']['tags/words']['tags']
            main_text += f"–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º/—Ç—ç–≥–∞–º (<code>{', '.join(words + (tags if tags else []))}</code>)"
    if 'note' in info:
        main_text += f"\n<b>‚Äî –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b> {info['note']}"

    # –ï—Å–ª–∏ –±—ã–ª –∑–∞–¥–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    if 'only_english' in info and info['only_english']:
        main_text += '\n<b>‚Äî –Ø–∑—ã–∫:</b> —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'
    return main_text


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä—ë—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —Å–ª–æ–≤–∞–º/—Ç—ç–≥–∞–º/—Å–ª–æ–≤–∞–º –∏ —Ç–µ–≥–∞–º)
async def text_under_adding_one_parameter_builder(info):
    # info = data['accepted']['comment_parameters']
    main_text = add_task['user_add_one_comment_parameter']
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if not info or info == {'one_value': {}}:
        return main_text + '\n\n–ö–∞–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—ã —Ö–æ—á–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?üëá'

    # –ï—Å–ª–∏ –±—ã–ª –∑–∞–¥–∞–Ω —Ö–æ—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
    main_text += '\n\n<b>‚Äî –ó–∞–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:</b> '
    # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    if info['words']:
        main_text += f"–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤ (<code>{info['words']}</code>)"
    # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ç–≥–æ–≤
    elif info['tags']:
        main_text += f"–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—ç–≥–æ–≤ (<code>{info['tags']}</code>"
    # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/—Ç—ç–≥–∏
    else:
        words = info['tags/words']['words']
        tags = info['tags/words']['tags']
        main_text += f"–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º/—Ç—ç–≥–∞–º (<code>{', '.join(words + (tags if tags else []))}</code>)"
    return main_text


# –ù–∞—Ö–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é
async def count_commission(list_actions: list[str], count=1):
    total_price = await define_price(list_actions, count)
    original_price = total_price / (1 + await db.get_commission() / 100)
    commission = total_price - original_price
    return round_numbers(commission)


# –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—Ç –ø—Ä–∞–π—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
async def define_price(list_actions: list, count=1) -> int | float:
    sum = 0
    prices_dict = await db.get_prices()
    if 'subscriptions' in list_actions:
        sum += prices_dict['subscriptions']
    if 'likes' in list_actions:
        sum += prices_dict['likes']
    if 'retweets' in list_actions:
        sum += prices_dict['retweets']
    if 'comments' in list_actions:
        sum += prices_dict['comments']

    # –°—á–∏—Ç–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é
    sum += (sum / 100 * await db.get_commission())
    sum *= count
    return round_numbers(sum)


def round_numbers(num: int | float) -> int | float:
    return int(num) if float(num).is_integer() else round(num, 2)


# –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ—á–µ–º—É —Ç–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
async def final_text_builder(list_actions: list) -> str:
    prices_dict = await db.get_prices()
    answer_dict = {'subscriptions': f"<b>+{prices_dict['subscriptions']} $STB –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>",
                   'likes': f"<b>+{prices_dict['likes']} $STB –∑–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∞–π–∫</b>",
                   'retweets': f"<b>+{prices_dict['retweets']} $STB –∑–∞ —Ä–µ—Ç–≤–∏—Ç</b>",
                   'comments': f"<b>+{prices_dict['comments']} $STB –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>",
                   'commission': f"<b>+{await count_commission(list_actions)} $STB –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>"}
    prices = ''
    for type_task in list_actions:
        prices += answer_dict[type_task] + '\n'
    prices += answer_dict['commission'] + '\n'

    return prices


# –ù–µ–±–æ–ª—å—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±–ª–æ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async def no_money_text_builder(data, balance: float, balance_flag: bool = False):
    need = await define_price(data['setting_actions'], data["number_users"] if "number_users" in data else 5)
    result = int(need - balance) if (need - balance).is_integer() else round(need - balance, 2)
    balance = int(balance) if type(balance) == float and balance.is_integer() else round(balance, 2)
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π –∏ –æ–Ω –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–ª –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ
    if balance_flag:
        text = '–£–ø—Å, –∫–∞–∫ —è –≤–∏–∂—É, <b>—Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–πü•≤</b>\n\n' + \
                f'<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–æ:</b> {data["number_users"]}\n' + \
                add_task['not_have_need_balance'].format(need, balance, result, await final_text_builder(data['setting_actions']))
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    else:
        text = '–£–ø—Å, –∫–∞–∫ —è –≤–∏–∂—É, <b>—Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π, —Ä–∞–≤–Ω–æ–≥–æ <code>5</code> ü•≤</b>\n\n' + \
                add_task['not_have_need_balance'].format(need, balance, result, await final_text_builder(data['setting_actions']))
    return text


# –£—ë–±–∏—â–Ω–µ–π—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–±–∏—Ä–∞—é—â–∞—è —Ç–µ–∫—Å—Ç-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –ª–∏–±–æ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –∑–∞—Ç—è–Ω—É—Ç—å—Å—è
async def text_before_posting(tg_id, data):
    exceptions = await db.feasibility_check(tg_id, data)
    # –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if not exceptions:
        return ''

    text = '\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: '
    executions = {}
    for action in exceptions:
        execution = await db.get_number_executions(data['accepted']['profile_link'] if action == 'subscriptions' else data['accepted']['post_link'], action)
        if execution > 20:
            executions[action] = execution
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (—ç—Ç–æ –æ —Ç–æ–º, —á—Ç–æ –º—ã —Ç–∞–∫–æ–π –æ–±—ä—ë–º –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–≤–µ–∑–µ–º, —É –Ω–∞—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç)
    basic_warnings = []
    for action, exception in exceptions.items():
        if exception == 'NotEnoughAccounts':
            basic_warnings.append(action)

    if basic_warnings:
        exceptions_basic_warning = {key: value for key, value in executions.items() if key in basic_warnings}
        dop_text = ''
        dop_dict = {'subscriptions': '–ø–æ–¥–ø–∏—Å–∫—É', 'likes': '–ª–∞–π–∫', 'retweets': '—Ä–µ—Ç–≤–∏—Ç', 'comments': '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
        for action in exceptions_basic_warning:
            if action == 'subscriptions':
                dop_text += '–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –∞–∫–∫–∞—É–Ω—Ç' + (', –∞ —Ç–∞–∫–∂–µ ' if 'likes' in exceptions_basic_warning or 'retweets' in exceptions_basic_warning or 'comments' in exceptions_basic_warning else '')
            else:
                dop_text += f"{', '.join([dop_dict[action] for action in exceptions_basic_warning if action != 'subscriptions'])} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –ø–æ—Å—Ç"
                break
        if dop_text:
            text += dop_text + ' —É–∂–µ –º–Ω–æ–≥–æ —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω—è–ª–∏\n'
        else:
            text += '–∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π'

        dop = f", –ª–∏–±–æ –∂–µ —É–±—Ä–∞—Ç—å {list(dop_dict)[0] + ' –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–¥–∞–Ω–∏–∏' if len(dop_dict) == 1 else '–æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–¥–∞–Ω–∏–∏'}" if dop_text else ''
        text += f"–ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ, –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞—Ç—è–Ω—É—Ç—å—Å—è. –í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ, —Ç—ã –º–æ–∂–µ—à—å —É–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π" + dop

    else:
        dop_text = ''
        dop_dict = {'subscriptions': '–ø–æ–¥–ø–∏—Å–∫—É', 'likes': '–ª–∞–π–∫', 'retweets': '—Ä–µ—Ç–≤–∏—Ç', 'comments': '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
        for action in executions:
            if action == 'subscriptions':
                dop_text += '–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –∞–∫–∫–∞—É–Ω—Ç' + (
                    ', –∞ —Ç–∞–∫–∂–µ ' if 'likes' in executions or 'retweets' in executions or 'comments' in executions else '')
            else:
                dop_text += f"{', '.join([dop_dict[action] for action in executions if action != 'subscriptions'])} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –ø–æ—Å—Ç"
                break
        if dop_text:
            text += dop_text + ' —É–∂–µ –º–Ω–æ–≥–æ —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω—è–ª–∏\n'
        dop = f", –ª–∏–±–æ –∂–µ —É–±—Ä–∞—Ç—å {list(dop_dict)[0] + ' –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–¥–∞–Ω–∏–∏' if len(dop_dict) == 1 else '–æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–¥–∞–Ω–∏–∏'}" if dop_text else ''
        text = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞—Ç—è–Ω—É—Ç—å—Å—è. –í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ, —Ç—ã –º–æ–∂–µ—à—å —É–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π' + dop

    return f'<i>{text}</i>'

